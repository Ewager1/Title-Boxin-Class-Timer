[{"/Users/edizzle/Desktop/Web Dev Projects/title_timer_app/src/index.js":"1","/Users/edizzle/Desktop/Web Dev Projects/title_timer_app/src/App.js":"2","/Users/edizzle/Desktop/Web Dev Projects/title_timer_app/src/store/timer-context.js":"3","/Users/edizzle/Desktop/Web Dev Projects/title_timer_app/src/pages/IntervalTimer.js":"4","/Users/edizzle/Desktop/Web Dev Projects/title_timer_app/src/pages/Homepage.js":"5","/Users/edizzle/Desktop/Web Dev Projects/title_timer_app/src/data/presetRounds.js":"6","/Users/edizzle/Desktop/Web Dev Projects/title_timer_app/src/components/Timer/TimerBody.js":"7","/Users/edizzle/Desktop/Web Dev Projects/title_timer_app/src/components/Timer/TimerHeader.js":"8","/Users/edizzle/Desktop/Web Dev Projects/title_timer_app/src/components/Timer/TimerFooter.js":"9","/Users/edizzle/Desktop/Web Dev Projects/title_timer_app/src/components/UI/Button.js":"10","/Users/edizzle/Desktop/Web Dev Projects/title_timer_app/src/components/UI/Wrapper.js":"11","/Users/edizzle/Desktop/Web Dev Projects/title_timer_app/src/components/CurrentTime/CurrentTime.js":"12"},{"size":223,"mtime":1623102220377,"results":"13","hashOfConfig":"14"},{"size":1191,"mtime":1623103141516,"results":"15","hashOfConfig":"14"},{"size":291,"mtime":1623102220379,"results":"16","hashOfConfig":"14"},{"size":8230,"mtime":1623102419455,"results":"17","hashOfConfig":"14"},{"size":2052,"mtime":1623102419454,"results":"18","hashOfConfig":"14"},{"size":725,"mtime":1623102220375,"results":"19","hashOfConfig":"14"},{"size":789,"mtime":1623102419452,"results":"20","hashOfConfig":"14"},{"size":581,"mtime":1623106698769,"results":"21","hashOfConfig":"14"},{"size":430,"mtime":1623102220365,"results":"22","hashOfConfig":"14"},{"size":401,"mtime":1623102220372,"results":"23","hashOfConfig":"14"},{"size":205,"mtime":1623102220374,"results":"24","hashOfConfig":"14"},{"size":428,"mtime":1623102220361,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1jk9urn",{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/edizzle/Desktop/Web Dev Projects/title_timer_app/src/index.js",[],"/Users/edizzle/Desktop/Web Dev Projects/title_timer_app/src/App.js",[],"/Users/edizzle/Desktop/Web Dev Projects/title_timer_app/src/store/timer-context.js",[],"/Users/edizzle/Desktop/Web Dev Projects/title_timer_app/src/pages/IntervalTimer.js",["51"],"import React, { useState, useEffect, useContext } from \"react\";\n\nimport { TimerHeader } from \"../components/Timer/TimerHeader\";\nimport { TimerBody } from \"../components/Timer/TimerBody\";\nimport { TimerFooter } from \"../components/Timer/TimerFooter\";\n\nimport TimerContext from \"../store/timer-context\";\n\nexport const IntervalTimer = () => {\n  // holds all the data used to decide how many rounds, time of each round, etc.\n  const ctx = useContext(TimerContext);\n\n  //holds current round. used to trigger useEffect for next round\n  const [classSegment, setClassSegment] = useState(\"Warmup\");\n\n  // made setInterval clearable globally\n  const [intervalId, setIntervalId] = useState();\n\n  //holds current time state\n  const [timer, setTimer] = useState({\n    displayedTime: ctx.isTrainingMode\n      ? \"3:00\"\n      : `${ctx.userChoice.warmUpTime}:00`,\n    minutes: 0,\n    seconds: 0,\n    maxRoundTime: 7,\n  });\n  // pause state\n  const [isPaused, setIsPaused] = useState(false);\n\n\n  useEffect(() => {\n    //Training mode has its own logic function\n    if (ctx.isTrainingMode) {\n      switch (classSegment) {\n        case \"Warmup\":\n          setClassSegment(\"Continuous Rounds\");\n          break;\n        case \"Continuous Rounds\":\n          setTimer((prevState) => ({\n            ...prevState,\n            maxRoundTime: 3,\n          }));\n\n          countdown(3, 0);\n          break;\n        case `Continuous Active Rest`:\n          setTimer((prevState) => ({\n            ...prevState,\n            maxRoundTime: 1,\n          }));\n          countdown(1, 0);\n          break;\n        default:\n      }\n    } else {\n      //regular class timers (not training mode)\n      switch (classSegment) {\n        case \"Warmup\":\n          setTimer((prevState) => ({\n            ...prevState,\n            maxRoundTime: ctx.userChoice.warmUpTime,\n          }));\n          countdown(ctx.userChoice.warmUpTime, 0);\n\n          break;\n        case \"Gloves On\":\n          setTimer((prevState) => ({\n            ...prevState,\n            maxRoundTime: ctx.userChoice.glovesOnOffTime,\n          }));\n          countdown(ctx.userChoice.glovesOnOffTime, 0);\n\n          break;\n        case `Round ${ctx.userChoice.currentRound}`:\n          setTimer((prevState) => ({\n            ...prevState,\n            maxRoundTime: ctx.userChoice.roundTime,\n          }));\n          countdown(ctx.userChoice.roundTime, 0);\n\n          break;\n        case \"Active Rest\":\n          setTimer((prevState) => ({\n            ...prevState,\n            maxRoundTime: ctx.userChoice.activeRestTime,\n          }));\n          countdown(ctx.userChoice.activeRestTime, 0);\n\n          break;\n        case \"Gloves Off\":\n          setTimer((prevState) => ({\n            ...prevState,\n            maxRoundTime: ctx.userChoice.glovesOnOffTime,\n          }));\n          countdown(ctx.userChoice.glovesOnOffTime, 0);\n\n          break;\n        case \"Core\":\n          setTimer((prevState) => ({\n            ...prevState,\n            maxRoundTime: ctx.userChoice.coreTime,\n          }));\n          countdown(ctx.userChoice.coreTime, 0);\n\n          break;\n        default:\n      }\n    }\n\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, [classSegment ]);\n\n\n  //inputs minutes and seconds and outputs a timer in conjunction with state\n  const countdown = (numOfMinutes, numOfSeconds) => {\n    let minutes = numOfMinutes;\n    let seconds = numOfSeconds;\n\n    const interval = setInterval(() => {\n      let digit = seconds < 10 ? \"0\" : \"\";\n\n      setTimer((prevState) => ({\n        ...prevState,\n        minutes: minutes,\n        seconds: seconds,\n        displayedTime: `${minutes}:${digit}${seconds}`,\n      }));\n\n      seconds--;\n\n      if (minutes === 0 && seconds < 0) {\n        clearInterval(interval);\n        ctx.isTrainingMode ? handleTrainingMode() : handleClassSegment();\n      }\n\n      if (minutes > 0 && seconds < 0) {\n        minutes--;\n        seconds = 59;\n      }\n    }, 1000);\n    setIntervalId(interval);\n  };\n\n  //handles natural logic flow\n  const handleClassSegment = () => {\n    switch (classSegment) {\n      case \"Warmup\":\n        setClassSegment(\"Gloves On\");\n        break;\n      case \"Gloves On\":\n        setClassSegment(`Round ${ctx.userChoice.currentRound}`);\n        break;\n      case `Round ${ctx.userChoice.currentRound}`:\n        if (ctx.userChoice.currentRound === ctx.userChoice.totalRounds) {\n          setClassSegment(\"Gloves Off\");\n        } else {\n          ctx.setuserChoice({\n            ...ctx.userChoice,\n            currentRound: (ctx.userChoice.currentRound += 1),\n          });\n          setClassSegment(\"Active Rest\");\n        }\n        break;\n      case \"Active Rest\":\n        setClassSegment(`Round ${ctx.userChoice.currentRound}`);\n\n        break;\n      case \"Gloves Off\":\n        setClassSegment(\"Core\");\n        break;\n      case \"Core\":\n        console.log(\"class done, this will reroute to home page \");\n        break;\n      default:\n    }\n  };\n\n  const handleTrainingMode = () => {\n    switch (classSegment) {\n      case \"Warmup\":\n        setClassSegment(\"Continuous Rounds\");\n        break;\n      case \"Continuous Rounds\":\n        setClassSegment(\"Continuous Active Rest\");\n        break;\n      case \"Continuous Active Rest\":\n        setClassSegment(\"Continuous Rounds\");\n        break;\n      default:\n    }\n  };\n\n  const pause = () => {\n    clearInterval(intervalId);\n    setIsPaused(true);\n  };\n\n  const play = () => {\n    countdown(timer.minutes, timer.seconds);\n    setIsPaused(false);\n  };\n\n  const rewind = () => {\n    let addedMinute = timer.minutes + 1;\n    let addedSeconds = timer.seconds + 15 - 60;\n    let digit = timer.seconds < 10 ? \"0\" : \"\";\n\n  \n    clearInterval(intervalId);\n  \n    if(timer.minutes === timer.maxRoundTime && timer.seconds === 0 && isPaused){\n      //break statement fix later \n    }\n    //stops rewind from going over rounds maximum time\n    else if (timer.minutes === timer.maxRoundTime) {\n      countdown(timer.minutes, timer.seconds);\n      if (isPaused) {\n        setTimer((prevState) => ({\n          ...prevState,\n          minutes: timer.minutes,\n          seconds: timer.seconds,\n          displayedTime: `${timer.minutes}:${digit}${timer.seconds}`,\n        }));\n      } \n    }\n    //stop rewind from going over rounds maximum time\n    else if (timer.minutes + 1 === timer.maxRoundTime && timer.seconds > 45) {\n      if (isPaused) {\n        setTimer((prevState) => ({\n          ...prevState,\n          minutes: timer.maxRoundTime,\n          seconds: 0,\n          displayedTime: `${timer.maxRoundTime}:00`,\n        }));\n      } else {\n        countdown(timer.maxRoundTime, 0);\n      }\n    }\n    else if (timer.minutes <= 1 && timer.seconds <= 1){\n     //break, stopping user from pausing at 0. Fix cleaner later \n    }\n    // go up a minute if 15 seconds pushes over 60\n    else if (timer.seconds > 45) {\n      if (isPaused) {\n        setTimer((prevState) => ({\n          ...prevState,\n          minutes: addedMinute,\n          seconds: addedSeconds,\n          displayedTime: `${addedMinute}:${addedSeconds < 10 ? \"0\" : ''}${addedSeconds}`,\n        }));\n      } else {\n        countdown(addedMinute, addedSeconds);\n      }\n    }\n    // go up a minute with no added seconds at 45\n    else if (timer.seconds === 45) {\n      if (isPaused) {\n        setTimer((prevState) => ({\n          ...prevState,\n          minutes: addedMinute,\n          seconds: 0,\n          displayedTime: `${addedMinute}:00`,\n        }));\n      } else {\n        countdown(addedMinute, 0);\n      }\n    }\n    // else add 15 seconds\n    else {\n      if (isPaused) {\n        \n        setTimer((prevState) => ({\n          ...prevState,\n          minutes: timer.minutes,\n          seconds: timer.seconds + 15,\n          displayedTime: `${timer.minutes}:${timer.seconds + 15 < 10 ? \"0\" : ''}${timer.seconds +15 }`,\n        }));\n      } else {\n        countdown(timer.minutes, timer.seconds + 15);\n      }\n    }\n  };\n\n\n  return (\n    <>\n      <TimerHeader handleClearInterval={() => clearInterval} />\n      <TimerBody\n        displayedTime={timer.displayedTime}\n        play={play}\n        pause={pause}\n        isPaused={isPaused}\n        rewind={rewind}\n      />\n      <TimerFooter classSegment={classSegment} />\n    </>\n  );\n};\n","/Users/edizzle/Desktop/Web Dev Projects/title_timer_app/src/pages/Homepage.js",[],"/Users/edizzle/Desktop/Web Dev Projects/title_timer_app/src/data/presetRounds.js",[],"/Users/edizzle/Desktop/Web Dev Projects/title_timer_app/src/components/Timer/TimerBody.js",[],"/Users/edizzle/Desktop/Web Dev Projects/title_timer_app/src/components/Timer/TimerHeader.js",[],"/Users/edizzle/Desktop/Web Dev Projects/title_timer_app/src/components/Timer/TimerFooter.js",[],"/Users/edizzle/Desktop/Web Dev Projects/title_timer_app/src/components/UI/Button.js",[],"/Users/edizzle/Desktop/Web Dev Projects/title_timer_app/src/components/UI/Wrapper.js",[],"/Users/edizzle/Desktop/Web Dev Projects/title_timer_app/src/components/CurrentTime/CurrentTime.js",[],{"ruleId":"52","severity":1,"message":"53","line":114,"column":6,"nodeType":"54","endLine":114,"endColumn":21,"suggestions":"55"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'countdown', 'ctx.isTrainingMode', 'ctx.userChoice.activeRestTime', 'ctx.userChoice.coreTime', 'ctx.userChoice.currentRound', 'ctx.userChoice.glovesOnOffTime', 'ctx.userChoice.roundTime', 'ctx.userChoice.warmUpTime', and 'intervalId'. Either include them or remove the dependency array.","ArrayExpression",["56"],{"desc":"57","fix":"58"},"Update the dependencies array to be: [classSegment, countdown, ctx.isTrainingMode, ctx.userChoice.activeRestTime, ctx.userChoice.coreTime, ctx.userChoice.currentRound, ctx.userChoice.glovesOnOffTime, ctx.userChoice.roundTime, ctx.userChoice.warmUpTime, intervalId]",{"range":"59","text":"60"},[3180,3195],"[classSegment, countdown, ctx.isTrainingMode, ctx.userChoice.activeRestTime, ctx.userChoice.coreTime, ctx.userChoice.currentRound, ctx.userChoice.glovesOnOffTime, ctx.userChoice.roundTime, ctx.userChoice.warmUpTime, intervalId]"]