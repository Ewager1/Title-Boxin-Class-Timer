{"ast":null,"code":"var _jsxFileName = \"/Users/edizzle/Desktop/Web Dev Projects/title-interval-app/title_interal_app/src/pages/IntervalTimer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { TimerHeader } from \"../components/Timer/TimerHeader\";\nimport { TimerBody } from \"../components/Timer/TimerBody\";\nimport { TimerFooter } from \"../components/Timer/TimerFooter\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const IntervalTimer = () => {\n  _s();\n\n  const [classSegment, setClassSegment] = useState(\"Warmup\");\n  const [intervalId, setIntervalId] = useState();\n  const [userChoice, setuserChoice] = useState({\n    totalRounds: 8,\n    currentRound: 1,\n    warmUpTime: 7,\n    activeRestTime: 1,\n    glovesOnOffTime: 1,\n    roundTime: 3,\n    coreTime: 7\n  });\n  const [timer, setTimer] = useState({\n    displayedTime: `${userChoice.warmUpTime}:00`,\n    minutes: 0,\n    seconds: 0\n  });\n  const [isPaused, setIsPaused] = useState(false);\n  useEffect(() => {\n    switch (classSegment) {\n      case \"Warmup\":\n        countdown(userChoice.warmUpTime, 0);\n        break;\n\n      case \"Gloves On\":\n        countdown(userChoice.glovesOnOffTime, 0);\n        break;\n\n      case `Round ${userChoice.currentRound}`:\n        countdown(userChoice.roundTime, 0);\n        break;\n\n      case \"Active Rest\":\n        countdown(userChoice.activeRestTime, 0);\n        break;\n\n      case \"Gloves Off\":\n        countdown(userChoice.glovesOnOffTime, 0);\n        break;\n\n      case \"Core\":\n        countdown(userChoice.coreTime, 0);\n        break;\n    }\n  }, [classSegment]); //inputs minutes and seconds and outputs a timer in conjunction with state\n\n  const countdown = (numOfMinutes, numOfSeconds) => {\n    let minutes = numOfMinutes;\n    let seconds = numOfSeconds;\n    const interval = setInterval(() => {\n      let digit = seconds < 10 ? \"0\" : \"\";\n      setTimer({\n        minutes: minutes,\n        seconds: seconds,\n        displayedTime: `${minutes}:${digit}${seconds}`\n      });\n      seconds--;\n\n      if (minutes === 0 && seconds === -1) {\n        clearInterval(interval);\n        handleClassSegment();\n      }\n\n      if (seconds === -1) {\n        minutes--;\n        seconds = 59;\n      }\n    }, 1000);\n    setIntervalId(interval);\n  }; //handles natural logic flow \n\n\n  const handleClassSegment = () => {\n    switch (classSegment) {\n      case \"Warmup\":\n        setClassSegment(\"Gloves On\");\n        break;\n\n      case \"Gloves On\":\n        setClassSegment(`Round ${userChoice.currentRound}`);\n        break;\n\n      case `Round ${userChoice.currentRound}`:\n        if (userChoice.currentRound === userChoice.totalRounds) {\n          setClassSegment(\"Gloves Off\");\n        } else {\n          setuserChoice({ ...userChoice,\n            currentRound: userChoice.currentRound += 1\n          });\n          setClassSegment(\"Active Rest\");\n        }\n\n        break;\n\n      case \"Active Rest\":\n        setClassSegment(`Round ${userChoice.currentRound}`);\n        break;\n\n      case \"Gloves Off\":\n        setClassSegment(\"Core\");\n        break;\n\n      case \"Core\":\n        console.log(\"class done, this will reroute to home page \");\n        break;\n    }\n  };\n\n  const pause = () => {\n    clearInterval(intervalId);\n    setIsPaused(true);\n  };\n\n  const play = () => {\n    countdown(timer.minutes, timer.seconds);\n    setIsPaused(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(TimerHeader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TimerBody, {\n      displayedTime: timer.displayedTime,\n      play: play,\n      pause: pause,\n      isPaused: isPaused\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TimerFooter, {\n      classSegment: classSegment\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(IntervalTimer, \"dfkmrHvVtm6lqZEtJMK+YvDF7z4=\");\n\n_c = IntervalTimer;\n\nvar _c;\n\n$RefreshReg$(_c, \"IntervalTimer\");","map":{"version":3,"sources":["/Users/edizzle/Desktop/Web Dev Projects/title-interval-app/title_interal_app/src/pages/IntervalTimer.js"],"names":["React","useState","useEffect","TimerHeader","TimerBody","TimerFooter","IntervalTimer","classSegment","setClassSegment","intervalId","setIntervalId","userChoice","setuserChoice","totalRounds","currentRound","warmUpTime","activeRestTime","glovesOnOffTime","roundTime","coreTime","timer","setTimer","displayedTime","minutes","seconds","isPaused","setIsPaused","countdown","numOfMinutes","numOfSeconds","interval","setInterval","digit","clearInterval","handleClassSegment","console","log","pause","play"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nimport { TimerHeader } from \"../components/Timer/TimerHeader\";\nimport { TimerBody } from \"../components/Timer/TimerBody\";\nimport { TimerFooter } from \"../components/Timer/TimerFooter\";\n\nexport const IntervalTimer = () => {\n  const [classSegment, setClassSegment] = useState(\"Warmup\");\n\n  const [intervalId, setIntervalId] = useState();\n\n  const [userChoice, setuserChoice] = useState({\n    totalRounds: 8,\n    currentRound: 1,\n    warmUpTime: 7,\n    activeRestTime: 1,\n    glovesOnOffTime: 1,\n    roundTime: 3,\n    coreTime: 7,\n  });\n\n  const [timer, setTimer] = useState({\n    displayedTime: `${userChoice.warmUpTime}:00`,\n    minutes: 0,\n    seconds: 0,\n  });\n\n  const [isPaused, setIsPaused] = useState(false);\n\n  useEffect(() => {\n    switch (classSegment) {\n      case \"Warmup\":\n        countdown(userChoice.warmUpTime, 0);\n        break;\n      case \"Gloves On\":\n        countdown(userChoice.glovesOnOffTime, 0);\n        break;\n      case `Round ${userChoice.currentRound}`:\n        countdown(userChoice.roundTime, 0);\n        break;\n      case \"Active Rest\":\n        countdown(userChoice.activeRestTime, 0);\n\n        break;\n      case \"Gloves Off\":\n        countdown(userChoice.glovesOnOffTime, 0);\n        break;\n      case \"Core\":\n        countdown(userChoice.coreTime, 0);\n        break;\n    }\n  }, [classSegment]);\n\n  //inputs minutes and seconds and outputs a timer in conjunction with state\n  const countdown = (numOfMinutes, numOfSeconds) => {\n    let minutes = numOfMinutes;\n    let seconds = numOfSeconds;\n\n    const interval = setInterval(() => {\n      let digit = seconds < 10 ? \"0\" : \"\";\n\n      setTimer({\n        minutes: minutes,\n        seconds: seconds,\n        displayedTime: `${minutes}:${digit}${seconds}`,\n      });\n\n      seconds--;\n\n      if (minutes === 0 && seconds === -1) {\n        clearInterval(interval);\n        handleClassSegment();\n      }\n\n      if (seconds === -1) {\n        minutes--;\n        seconds = 59;\n      }\n    }, 1000);\n    setIntervalId(interval);\n  };\n\n\n//handles natural logic flow \n  const handleClassSegment = () => {\n    switch (classSegment) {\n      case \"Warmup\":\n        setClassSegment(\"Gloves On\");\n        break;\n      case \"Gloves On\":\n        setClassSegment(`Round ${userChoice.currentRound}`);\n        break;\n      case `Round ${userChoice.currentRound}`:\n        if (userChoice.currentRound === userChoice.totalRounds) {\n          setClassSegment(\"Gloves Off\");\n        } else {\n          setuserChoice({\n            ...userChoice,\n            currentRound: (userChoice.currentRound += 1),\n          });\n          setClassSegment(\"Active Rest\");\n        }\n        break;\n      case \"Active Rest\":\n        setClassSegment(`Round ${userChoice.currentRound}`);\n\n        break;\n      case \"Gloves Off\":\n        setClassSegment(\"Core\");\n        break;\n      case \"Core\":\n        console.log(\"class done, this will reroute to home page \");\n        break;\n    }\n  };\n\n  const pause = () => \n  {clearInterval(intervalId)\n  setIsPaused(true)}\n\n  const play = () =>{ \n    countdown(timer.minutes, timer.seconds);\n    setIsPaused(false)\n\n  } \n\n  return (\n    <>\n      <TimerHeader />\n      <TimerBody\n        displayedTime={timer.displayedTime}\n        play={play}\n        pause={pause}\n        isPaused={isPaused}\n      />\n      <TimerFooter classSegment={classSegment} />\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}