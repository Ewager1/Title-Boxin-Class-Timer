{"ast":null,"code":"import _objectSpread from\"/Users/edizzle/Desktop/Web Dev Projects/title_timer_app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Users/edizzle/Desktop/Web Dev Projects/title_timer_app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect,useContext}from\"react\";import{TimerHeader}from\"../components/Timer/TimerHeader\";import{TimerBody}from\"../components/Timer/TimerBody\";import{TimerFooter}from\"../components/Timer/TimerFooter\";import TimerContext from\"../store/timer-context\";import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export var IntervalTimer=function IntervalTimer(){// holds all the data used to decide how many rounds, time of each round, etc.\nvar ctx=useContext(TimerContext);//holds current round. used to trigger useEffect for next round\nvar _useState=useState(\"Warmup\"),_useState2=_slicedToArray(_useState,2),classSegment=_useState2[0],setClassSegment=_useState2[1];// made setInterval clearable globally\nvar _useState3=useState(),_useState4=_slicedToArray(_useState3,2),intervalId=_useState4[0],setIntervalId=_useState4[1];//holds current time state\nvar _useState5=useState({displayedTime:ctx.isTrainingMode?\"3:00\":\"\".concat(ctx.userChoice.warmUpTime,\":00\"),minutes:0,seconds:0,maxRoundTime:7}),_useState6=_slicedToArray(_useState5,2),timer=_useState6[0],setTimer=_useState6[1];// pause state\nvar _useState7=useState(false),_useState8=_slicedToArray(_useState7,2),isPaused=_useState8[0],setIsPaused=_useState8[1];useEffect(function(){//Training mode has its own logic function\nif(ctx.isTrainingMode){switch(classSegment){case\"Warmup\":setClassSegment(\"Continuous Rounds\");break;case\"Continuous Rounds\":setTimer(function(prevState){return _objectSpread(_objectSpread({},prevState),{},{maxRoundTime:3});});countdown(3,0);break;case\"Continuous Active Rest\":setTimer(function(prevState){return _objectSpread(_objectSpread({},prevState),{},{maxRoundTime:1});});countdown(1,0);break;default:}}else{//regular class timers (not training mode)\nswitch(classSegment){case\"Warmup\":setTimer(function(prevState){return _objectSpread(_objectSpread({},prevState),{},{maxRoundTime:ctx.userChoice.warmUpTime});});countdown(ctx.userChoice.warmUpTime,0);break;case\"Gloves On\":setTimer(function(prevState){return _objectSpread(_objectSpread({},prevState),{},{maxRoundTime:ctx.userChoice.glovesOnOffTime});});countdown(ctx.userChoice.glovesOnOffTime,0);break;case\"Round \".concat(ctx.userChoice.currentRound):setTimer(function(prevState){return _objectSpread(_objectSpread({},prevState),{},{maxRoundTime:ctx.userChoice.roundTime});});countdown(ctx.userChoice.roundTime,0);break;case\"Active Rest\":setTimer(function(prevState){return _objectSpread(_objectSpread({},prevState),{},{maxRoundTime:ctx.userChoice.activeRestTime});});countdown(ctx.userChoice.activeRestTime,0);break;case\"Gloves Off\":setTimer(function(prevState){return _objectSpread(_objectSpread({},prevState),{},{maxRoundTime:ctx.userChoice.glovesOnOffTime});});countdown(ctx.userChoice.glovesOnOffTime,0);break;case\"Core\":setTimer(function(prevState){return _objectSpread(_objectSpread({},prevState),{},{maxRoundTime:ctx.userChoice.coreTime});});countdown(ctx.userChoice.coreTime,0);break;default:}}return function(){clearInterval(intervalId);};},[classSegment]);//inputs minutes and seconds and outputs a timer in conjunction with state\nvar countdown=function countdown(numOfMinutes,numOfSeconds){var minutes=numOfMinutes;var seconds=numOfSeconds;var interval=setInterval(function(){var digit=seconds<10?\"0\":\"\";setTimer(function(prevState){return _objectSpread(_objectSpread({},prevState),{},{minutes:minutes,seconds:seconds,displayedTime:\"\".concat(minutes,\":\").concat(digit).concat(seconds)});});seconds--;if(minutes===0&&seconds<0){clearInterval(interval);ctx.isTrainingMode?handleTrainingMode():handleClassSegment();}if(minutes>0&&seconds<0){minutes--;seconds=59;}},1000);setIntervalId(interval);};//handles natural logic flow\nvar handleClassSegment=function handleClassSegment(){switch(classSegment){case\"Warmup\":setClassSegment(\"Gloves On\");break;case\"Gloves On\":setClassSegment(\"Round \".concat(ctx.userChoice.currentRound));break;case\"Round \".concat(ctx.userChoice.currentRound):if(ctx.userChoice.currentRound===ctx.userChoice.totalRounds){setClassSegment(\"Gloves Off\");}else{ctx.setuserChoice(_objectSpread(_objectSpread({},ctx.userChoice),{},{currentRound:ctx.userChoice.currentRound+=1}));setClassSegment(\"Active Rest\");}break;case\"Active Rest\":setClassSegment(\"Round \".concat(ctx.userChoice.currentRound));break;case\"Gloves Off\":setClassSegment(\"Core\");break;case\"Core\":console.log(\"class done, this will reroute to home page \");break;default:}};var handleTrainingMode=function handleTrainingMode(){switch(classSegment){case\"Warmup\":setClassSegment(\"Continuous Rounds\");break;case\"Continuous Rounds\":setClassSegment(\"Continuous Active Rest\");break;case\"Continuous Active Rest\":setClassSegment(\"Continuous Rounds\");break;default:}};var pause=function pause(){clearInterval(intervalId);setIsPaused(true);};var play=function play(){countdown(timer.minutes,timer.seconds);setIsPaused(false);};var rewind=function rewind(){var addedMinute=timer.minutes+1;var addedSeconds=timer.seconds+15-60;var digit=timer.seconds<10?\"0\":\"\";clearInterval(intervalId);if(timer.minutes===timer.maxRoundTime&&timer.seconds===0&&isPaused){//break statement fix later \n}//stops rewind from going over rounds maximum time\nelse if(timer.minutes===timer.maxRoundTime){countdown(timer.minutes,timer.seconds);if(isPaused){setTimer(function(prevState){return _objectSpread(_objectSpread({},prevState),{},{minutes:timer.minutes,seconds:timer.seconds,displayedTime:\"\".concat(timer.minutes,\":\").concat(digit).concat(timer.seconds)});});}}//stop rewind from going over rounds maximum time\nelse if(timer.minutes+1===timer.maxRoundTime&&timer.seconds>45){if(isPaused){setTimer(function(prevState){return _objectSpread(_objectSpread({},prevState),{},{minutes:timer.maxRoundTime,seconds:0,displayedTime:\"\".concat(timer.maxRoundTime,\":00\")});});}else{countdown(timer.maxRoundTime,0);}}else if(timer.minutes<=1&&timer.seconds<=1){//break, stopping user from pausing at 0. Fix cleaner later \n}// go up a minute if 15 seconds pushes over 60\nelse if(timer.seconds>45){if(isPaused){setTimer(function(prevState){return _objectSpread(_objectSpread({},prevState),{},{minutes:addedMinute,seconds:addedSeconds,displayedTime:\"\".concat(addedMinute,\":\").concat(addedSeconds<10?\"0\":'').concat(addedSeconds)});});}else{countdown(addedMinute,addedSeconds);}}// go up a minute with no added seconds at 45\nelse if(timer.seconds===45){if(isPaused){setTimer(function(prevState){return _objectSpread(_objectSpread({},prevState),{},{minutes:addedMinute,seconds:0,displayedTime:\"\".concat(addedMinute,\":00\")});});}else{countdown(addedMinute,0);}}// else add 15 seconds\nelse{if(isPaused){setTimer(function(prevState){return _objectSpread(_objectSpread({},prevState),{},{minutes:timer.minutes,seconds:timer.seconds+15,displayedTime:\"\".concat(timer.minutes,\":\").concat(timer.seconds+15<10?\"0\":'').concat(timer.seconds+15)});});}else{countdown(timer.minutes,timer.seconds+15);}}};return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(TimerHeader,{handleClearInterval:function handleClearInterval(){return clearInterval;}}),/*#__PURE__*/_jsx(TimerBody,{displayedTime:timer.displayedTime,play:play,pause:pause,isPaused:isPaused,rewind:rewind}),/*#__PURE__*/_jsx(TimerFooter,{classSegment:classSegment})]});};","map":{"version":3,"sources":["/Users/edizzle/Desktop/Web Dev Projects/title_timer_app/src/pages/IntervalTimer.js"],"names":["React","useState","useEffect","useContext","TimerHeader","TimerBody","TimerFooter","TimerContext","IntervalTimer","ctx","classSegment","setClassSegment","intervalId","setIntervalId","displayedTime","isTrainingMode","userChoice","warmUpTime","minutes","seconds","maxRoundTime","timer","setTimer","isPaused","setIsPaused","prevState","countdown","glovesOnOffTime","currentRound","roundTime","activeRestTime","coreTime","clearInterval","numOfMinutes","numOfSeconds","interval","setInterval","digit","handleTrainingMode","handleClassSegment","totalRounds","setuserChoice","console","log","pause","play","rewind","addedMinute","addedSeconds"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\n\nimport { TimerHeader } from \"../components/Timer/TimerHeader\";\nimport { TimerBody } from \"../components/Timer/TimerBody\";\nimport { TimerFooter } from \"../components/Timer/TimerFooter\";\n\nimport TimerContext from \"../store/timer-context\";\n\nexport const IntervalTimer = () => {\n  // holds all the data used to decide how many rounds, time of each round, etc.\n  const ctx = useContext(TimerContext);\n\n  //holds current round. used to trigger useEffect for next round\n  const [classSegment, setClassSegment] = useState(\"Warmup\");\n\n  // made setInterval clearable globally\n  const [intervalId, setIntervalId] = useState();\n\n  //holds current time state\n  const [timer, setTimer] = useState({\n    displayedTime: ctx.isTrainingMode\n      ? \"3:00\"\n      : `${ctx.userChoice.warmUpTime}:00`,\n    minutes: 0,\n    seconds: 0,\n    maxRoundTime: 7,\n  });\n  // pause state\n  const [isPaused, setIsPaused] = useState(false);\n\n\n  useEffect(() => {\n    //Training mode has its own logic function\n    if (ctx.isTrainingMode) {\n      switch (classSegment) {\n        case \"Warmup\":\n          setClassSegment(\"Continuous Rounds\");\n          break;\n        case \"Continuous Rounds\":\n          setTimer((prevState) => ({\n            ...prevState,\n            maxRoundTime: 3,\n          }));\n\n          countdown(3, 0);\n          break;\n        case `Continuous Active Rest`:\n          setTimer((prevState) => ({\n            ...prevState,\n            maxRoundTime: 1,\n          }));\n          countdown(1, 0);\n          break;\n        default:\n      }\n    } else {\n      //regular class timers (not training mode)\n      switch (classSegment) {\n        case \"Warmup\":\n          setTimer((prevState) => ({\n            ...prevState,\n            maxRoundTime: ctx.userChoice.warmUpTime,\n          }));\n          countdown(ctx.userChoice.warmUpTime, 0);\n\n          break;\n        case \"Gloves On\":\n          setTimer((prevState) => ({\n            ...prevState,\n            maxRoundTime: ctx.userChoice.glovesOnOffTime,\n          }));\n          countdown(ctx.userChoice.glovesOnOffTime, 0);\n\n          break;\n        case `Round ${ctx.userChoice.currentRound}`:\n          setTimer((prevState) => ({\n            ...prevState,\n            maxRoundTime: ctx.userChoice.roundTime,\n          }));\n          countdown(ctx.userChoice.roundTime, 0);\n\n          break;\n        case \"Active Rest\":\n          setTimer((prevState) => ({\n            ...prevState,\n            maxRoundTime: ctx.userChoice.activeRestTime,\n          }));\n          countdown(ctx.userChoice.activeRestTime, 0);\n\n          break;\n        case \"Gloves Off\":\n          setTimer((prevState) => ({\n            ...prevState,\n            maxRoundTime: ctx.userChoice.glovesOnOffTime,\n          }));\n          countdown(ctx.userChoice.glovesOnOffTime, 0);\n\n          break;\n        case \"Core\":\n          setTimer((prevState) => ({\n            ...prevState,\n            maxRoundTime: ctx.userChoice.coreTime,\n          }));\n          countdown(ctx.userChoice.coreTime, 0);\n\n          break;\n        default:\n      }\n    }\n\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, [classSegment ]);\n\n\n  //inputs minutes and seconds and outputs a timer in conjunction with state\n  const countdown = (numOfMinutes, numOfSeconds) => {\n    let minutes = numOfMinutes;\n    let seconds = numOfSeconds;\n\n    const interval = setInterval(() => {\n      let digit = seconds < 10 ? \"0\" : \"\";\n\n      setTimer((prevState) => ({\n        ...prevState,\n        minutes: minutes,\n        seconds: seconds,\n        displayedTime: `${minutes}:${digit}${seconds}`,\n      }));\n\n      seconds--;\n\n      if (minutes === 0 && seconds < 0) {\n        clearInterval(interval);\n        ctx.isTrainingMode ? handleTrainingMode() : handleClassSegment();\n      }\n\n      if (minutes > 0 && seconds < 0) {\n        minutes--;\n        seconds = 59;\n      }\n    }, 1000);\n    setIntervalId(interval);\n  };\n\n  //handles natural logic flow\n  const handleClassSegment = () => {\n    switch (classSegment) {\n      case \"Warmup\":\n        setClassSegment(\"Gloves On\");\n        break;\n      case \"Gloves On\":\n        setClassSegment(`Round ${ctx.userChoice.currentRound}`);\n        break;\n      case `Round ${ctx.userChoice.currentRound}`:\n        if (ctx.userChoice.currentRound === ctx.userChoice.totalRounds) {\n          setClassSegment(\"Gloves Off\");\n        } else {\n          ctx.setuserChoice({\n            ...ctx.userChoice,\n            currentRound: (ctx.userChoice.currentRound += 1),\n          });\n          setClassSegment(\"Active Rest\");\n        }\n        break;\n      case \"Active Rest\":\n        setClassSegment(`Round ${ctx.userChoice.currentRound}`);\n\n        break;\n      case \"Gloves Off\":\n        setClassSegment(\"Core\");\n        break;\n      case \"Core\":\n        console.log(\"class done, this will reroute to home page \");\n        break;\n      default:\n    }\n  };\n\n  const handleTrainingMode = () => {\n    switch (classSegment) {\n      case \"Warmup\":\n        setClassSegment(\"Continuous Rounds\");\n        break;\n      case \"Continuous Rounds\":\n        setClassSegment(\"Continuous Active Rest\");\n        break;\n      case \"Continuous Active Rest\":\n        setClassSegment(\"Continuous Rounds\");\n        break;\n      default:\n    }\n  };\n\n  const pause = () => {\n    clearInterval(intervalId);\n    setIsPaused(true);\n  };\n\n  const play = () => {\n    countdown(timer.minutes, timer.seconds);\n    setIsPaused(false);\n  };\n\n  const rewind = () => {\n    let addedMinute = timer.minutes + 1;\n    let addedSeconds = timer.seconds + 15 - 60;\n    let digit = timer.seconds < 10 ? \"0\" : \"\";\n\n  \n    clearInterval(intervalId);\n  \n    if(timer.minutes === timer.maxRoundTime && timer.seconds === 0 && isPaused){\n      //break statement fix later \n    }\n    //stops rewind from going over rounds maximum time\n    else if (timer.minutes === timer.maxRoundTime) {\n      countdown(timer.minutes, timer.seconds);\n      if (isPaused) {\n        setTimer((prevState) => ({\n          ...prevState,\n          minutes: timer.minutes,\n          seconds: timer.seconds,\n          displayedTime: `${timer.minutes}:${digit}${timer.seconds}`,\n        }));\n      } \n    }\n    //stop rewind from going over rounds maximum time\n    else if (timer.minutes + 1 === timer.maxRoundTime && timer.seconds > 45) {\n      if (isPaused) {\n        setTimer((prevState) => ({\n          ...prevState,\n          minutes: timer.maxRoundTime,\n          seconds: 0,\n          displayedTime: `${timer.maxRoundTime}:00`,\n        }));\n      } else {\n        countdown(timer.maxRoundTime, 0);\n      }\n    }\n    else if (timer.minutes <= 1 && timer.seconds <= 1){\n     //break, stopping user from pausing at 0. Fix cleaner later \n    }\n    // go up a minute if 15 seconds pushes over 60\n    else if (timer.seconds > 45) {\n      if (isPaused) {\n        setTimer((prevState) => ({\n          ...prevState,\n          minutes: addedMinute,\n          seconds: addedSeconds,\n          displayedTime: `${addedMinute}:${addedSeconds < 10 ? \"0\" : ''}${addedSeconds}`,\n        }));\n      } else {\n        countdown(addedMinute, addedSeconds);\n      }\n    }\n    // go up a minute with no added seconds at 45\n    else if (timer.seconds === 45) {\n      if (isPaused) {\n        setTimer((prevState) => ({\n          ...prevState,\n          minutes: addedMinute,\n          seconds: 0,\n          displayedTime: `${addedMinute}:00`,\n        }));\n      } else {\n        countdown(addedMinute, 0);\n      }\n    }\n    // else add 15 seconds\n    else {\n      if (isPaused) {\n        \n        setTimer((prevState) => ({\n          ...prevState,\n          minutes: timer.minutes,\n          seconds: timer.seconds + 15,\n          displayedTime: `${timer.minutes}:${timer.seconds + 15 < 10 ? \"0\" : ''}${timer.seconds +15 }`,\n        }));\n      } else {\n        countdown(timer.minutes, timer.seconds + 15);\n      }\n    }\n  };\n\n\n  return (\n    <>\n      <TimerHeader handleClearInterval={() => clearInterval} />\n      <TimerBody\n        displayedTime={timer.displayedTime}\n        play={play}\n        pause={pause}\n        isPaused={isPaused}\n        rewind={rewind}\n      />\n      <TimerFooter classSegment={classSegment} />\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}