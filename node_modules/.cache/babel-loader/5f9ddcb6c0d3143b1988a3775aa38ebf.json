{"ast":null,"code":"var _jsxFileName = \"/Users/edizzle/Desktop/Web Dev Projects/title-interval-app/title_interal_app/src/pages/IntervalTimer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext } from \"react\";\nimport { TimerHeader } from \"../components/Timer/TimerHeader\";\nimport { TimerBody } from \"../components/Timer/TimerBody\";\nimport { TimerFooter } from \"../components/Timer/TimerFooter\";\nimport TimerContext from \"../store/timer-context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const IntervalTimer = () => {\n  _s();\n\n  // holds all the data used to decide how many rounds, time of each round, etc.\n  const ctx = useContext(TimerContext); //holds current round. used to trigger useEffect for next round\n\n  const [classSegment, setClassSegment] = useState(\"Warmup\"); // made setInterval clearable globally\n\n  const [intervalId, setIntervalId] = useState(); //holds current time state\n\n  const [timer, setTimer] = useState({\n    displayedTime: ctx.isTrainingMode ? \"3:00\" : `${ctx.userChoice.warmUpTime}:00`,\n    minutes: 0,\n    seconds: 0\n  }); // pause state\n\n  const [isPaused, setIsPaused] = useState(false);\n  useEffect(() => {\n    //Training mode has its own logic function\n    if (ctx.isTrainingMode) {\n      switch (classSegment) {\n        case \"Warmup\":\n          setClassSegment(\"Continuous Rounds\");\n          break;\n\n        case \"Continuous Rounds\":\n          countdown(3, 0);\n          break;\n\n        case `Continuous Active Rest`:\n          countdown(1, 0);\n          break;\n\n        default:\n      }\n    } else {\n      //regular class timers (not training mode)\n      switch (classSegment) {\n        case \"Warmup\":\n          countdown(ctx.userChoice.warmUpTime, 0);\n          break;\n\n        case \"Gloves On\":\n          countdown(ctx.userChoice.glovesOnOffTime, 0);\n          break;\n\n        case `Round ${ctx.userChoice.currentRound}`:\n          countdown(ctx.userChoice.roundTime, 0);\n          break;\n\n        case \"Active Rest\":\n          countdown(ctx.userChoice.activeRestTime, 0);\n          break;\n\n        case \"Gloves Off\":\n          countdown(ctx.userChoice.glovesOnOffTime, 0);\n          break;\n\n        case \"Core\":\n          countdown(ctx.userChoice.coreTime, 0);\n          break;\n\n        default:\n      }\n    }\n\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, [classSegment]); //inputs minutes and seconds and outputs a timer in conjunction with state\n\n  const countdown = (numOfMinutes, numOfSeconds) => {\n    let minutes = numOfMinutes;\n    let seconds = numOfSeconds;\n    const interval = setInterval(() => {\n      let digit = seconds < 10 ? \"0\" : \"\";\n      setTimer({\n        minutes: minutes,\n        seconds: seconds,\n        displayedTime: `${minutes}:${digit}${seconds}`\n      });\n      seconds--;\n\n      if (minutes === 0 && seconds < 0) {\n        clearInterval(interval);\n        ctx.isTrainingMode ? handleTrainingMode() : handleClassSegment();\n      }\n\n      if (minutes > 0 && seconds < 0) {\n        minutes--;\n        seconds = 59;\n      }\n    }, 1000);\n    setIntervalId(interval);\n  }; //handles natural logic flow\n\n\n  const handleClassSegment = () => {\n    switch (classSegment) {\n      case \"Warmup\":\n        setClassSegment(\"Gloves On\");\n        break;\n\n      case \"Gloves On\":\n        setClassSegment(`Round ${ctx.userChoice.currentRound}`);\n        break;\n\n      case `Round ${ctx.userChoice.currentRound}`:\n        if (ctx.userChoice.currentRound === ctx.userChoice.totalRounds) {\n          setClassSegment(\"Gloves Off\");\n        } else {\n          ctx.setuserChoice({ ...ctx.userChoice,\n            currentRound: ctx.userChoice.currentRound += 1\n          });\n          setClassSegment(\"Active Rest\");\n        }\n\n        break;\n\n      case \"Active Rest\":\n        setClassSegment(`Round ${ctx.userChoice.currentRound}`);\n        break;\n\n      case \"Gloves Off\":\n        setClassSegment(\"Core\");\n        break;\n\n      case \"Core\":\n        console.log(\"class done, this will reroute to home page \");\n        break;\n\n      default:\n    }\n  };\n\n  const handleTrainingMode = () => {\n    switch (classSegment) {\n      case \"Warmup\":\n        setClassSegment(\"Continuous Rounds\");\n        break;\n\n      case \"Continuous Rounds\":\n        setClassSegment(\"Continuous Active Rest\");\n        break;\n\n      case \"Continuous Active Rest\":\n        setClassSegment(\"Continuous Rounds\");\n        break;\n\n      default:\n    }\n  };\n\n  const pause = () => {\n    clearInterval(intervalId);\n    setIsPaused(true);\n  };\n\n  const play = () => {\n    countdown(timer.minutes, timer.seconds);\n    setIsPaused(false);\n  };\n\n  const rewind = () => {\n    clearInterval(intervalId);\n    countdown(timer.minute, timer.seconds - 15);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(TimerHeader, {\n      handleClearInterval: () => clearInterval\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TimerBody, {\n      displayedTime: timer.displayedTime,\n      play: play,\n      pause: pause,\n      isPaused: isPaused,\n      rewind: rewind\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TimerFooter, {\n      classSegment: classSegment\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(IntervalTimer, \"Mlg6Jy3RgBy/U28PvjNqygo61Xg=\");\n\n_c = IntervalTimer;\n\nvar _c;\n\n$RefreshReg$(_c, \"IntervalTimer\");","map":{"version":3,"sources":["/Users/edizzle/Desktop/Web Dev Projects/title-interval-app/title_interal_app/src/pages/IntervalTimer.js"],"names":["React","useState","useEffect","useContext","TimerHeader","TimerBody","TimerFooter","TimerContext","IntervalTimer","ctx","classSegment","setClassSegment","intervalId","setIntervalId","timer","setTimer","displayedTime","isTrainingMode","userChoice","warmUpTime","minutes","seconds","isPaused","setIsPaused","countdown","glovesOnOffTime","currentRound","roundTime","activeRestTime","coreTime","clearInterval","numOfMinutes","numOfSeconds","interval","setInterval","digit","handleTrainingMode","handleClassSegment","totalRounds","setuserChoice","console","log","pause","play","rewind","minute"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\n\nimport { TimerHeader } from \"../components/Timer/TimerHeader\";\nimport { TimerBody } from \"../components/Timer/TimerBody\";\nimport { TimerFooter } from \"../components/Timer/TimerFooter\";\n\nimport TimerContext from \"../store/timer-context\";\n\nexport const IntervalTimer = () => {\n  // holds all the data used to decide how many rounds, time of each round, etc.\n  const ctx = useContext(TimerContext);\n  //holds current round. used to trigger useEffect for next round\n  const [classSegment, setClassSegment] = useState(\"Warmup\");\n  // made setInterval clearable globally\n  const [intervalId, setIntervalId] = useState();\n  //holds current time state\n  const [timer, setTimer] = useState({\n    displayedTime: ctx.isTrainingMode\n      ? \"3:00\"\n      : `${ctx.userChoice.warmUpTime}:00`,\n    minutes: 0,\n    seconds: 0,\n  });\n  // pause state\n  const [isPaused, setIsPaused] = useState(false);\n\n  useEffect(() => {\n    //Training mode has its own logic function\n    if (ctx.isTrainingMode) {\n      switch (classSegment) {\n        case \"Warmup\":\n          setClassSegment(\"Continuous Rounds\");\n          break;\n        case \"Continuous Rounds\":\n          countdown(3, 0);\n          break;\n        case `Continuous Active Rest`:\n          countdown(1, 0);\n          break;\n        default:\n      }\n    } else {\n      //regular class timers (not training mode)\n      switch (classSegment) {\n        case \"Warmup\":\n          countdown(ctx.userChoice.warmUpTime, 0);\n          break;\n        case \"Gloves On\":\n          countdown(ctx.userChoice.glovesOnOffTime, 0);\n          break;\n        case `Round ${ctx.userChoice.currentRound}`:\n          countdown(ctx.userChoice.roundTime, 0);\n          break;\n        case \"Active Rest\":\n          countdown(ctx.userChoice.activeRestTime, 0);\n\n          break;\n        case \"Gloves Off\":\n          countdown(ctx.userChoice.glovesOnOffTime, 0);\n          break;\n        case \"Core\":\n          countdown(ctx.userChoice.coreTime, 0);\n          break;\n        default:\n      }\n    }\n   \n    return () => {\n      clearInterval(intervalId);\n    };\n  }, [classSegment]);\n\n  //inputs minutes and seconds and outputs a timer in conjunction with state\n  const countdown = (numOfMinutes, numOfSeconds) => {\n    let minutes = numOfMinutes;\n    let seconds = numOfSeconds;\n\n    const interval = setInterval(() => {\n      let digit = seconds < 10 ? \"0\" : \"\";\n\n      setTimer({\n        minutes: minutes,\n        seconds: seconds,\n        displayedTime: `${minutes}:${digit}${seconds}`,\n      });\n\n      seconds--;\n\n      if (minutes === 0 && seconds < 0) {\n        clearInterval(interval);\n        ctx.isTrainingMode ? handleTrainingMode() :  handleClassSegment();\n      } \n      \n      if (minutes > 0 && seconds < 0) {\n        minutes--;\n        seconds = 59;\n      }\n    }, 1000);\n    setIntervalId(interval);\n  };\n\n\n  //handles natural logic flow\n  const handleClassSegment = () => {\n    switch (classSegment) {\n      case \"Warmup\":\n        setClassSegment(\"Gloves On\");\n        break;\n      case \"Gloves On\":\n        setClassSegment(`Round ${ctx.userChoice.currentRound}`);\n        break;\n      case `Round ${ctx.userChoice.currentRound}`:\n        if (ctx.userChoice.currentRound === ctx.userChoice.totalRounds) {\n          setClassSegment(\"Gloves Off\");\n        } else {\n          ctx.setuserChoice({\n            ...ctx.userChoice,\n            currentRound: (ctx.userChoice.currentRound += 1),\n          });\n          setClassSegment(\"Active Rest\");\n        }\n        break;\n      case \"Active Rest\":\n        setClassSegment(`Round ${ctx.userChoice.currentRound}`);\n\n        break;\n      case \"Gloves Off\":\n        setClassSegment(\"Core\");\n        break;\n      case \"Core\":\n        console.log(\"class done, this will reroute to home page \");\n        break;\n      default:\n    }\n  };\n\n  const handleTrainingMode = () => {\n    switch (classSegment) {\n      case \"Warmup\":\n        setClassSegment(\"Continuous Rounds\");\n        break;\n      case \"Continuous Rounds\":\n        setClassSegment(\"Continuous Active Rest\");\n        break;\n      case \"Continuous Active Rest\":\n        setClassSegment(\"Continuous Rounds\");\n        break;\n      default:\n    }\n  };\n\n  const pause = () => {\n    clearInterval(intervalId);\n    setIsPaused(true);\n  };\n\n  const play = () => {\n    countdown(timer.minutes, timer.seconds);\n    setIsPaused(false);\n  };\n\n  const rewind = () =>{\n    \n    clearInterval(intervalId)\n    countdown(timer.minute, timer.seconds -15)\n  };\n\n\n\n  return (\n    <>\n      <TimerHeader\n      handleClearInterval={() => clearInterval} />\n      <TimerBody\n        displayedTime={timer.displayedTime}\n        play={play}\n        pause={pause}\n        isPaused={isPaused}\n        rewind={rewind}\n      />\n      <TimerFooter classSegment={classSegment} /> \n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}